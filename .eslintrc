{
  "root": true,
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "tsconfigRootDir": "./"
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "react"
  ],
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "standard"
  ],
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "mocha": true
  },
  "globals": {
    "expect": false,
    "jest": false,
    "beforeAll": false,
    "afterAll": false,
    "__WebpackModuleApi": false
  },
  "rules": {
    "no-use-before-define": "off",
    "no-unused-vars": "off",
    "no-undef": "off",
    "@typescript-eslint/no-use-before-define": "off", // Allows us to hoist variables and functions which I am a fan of, functions not variables that is.
    "@typescript-eslint/no-explicit-any": "off", // Too strict for my case, sometimes I need an any type
    "@typescript-eslint/member-delimiter-style": ["error", { // Prevents us from using any delimiter for interface properties.
      "multiline": {
        "delimiter": "none",
        "requireLast": false
      },
      "singleline": {
        "delimiter": "comma",
        "requireLast": false
      }
    }],
    "@typescript-eslint/indent": "off", // This is the job of StandardJS, they are competing rules so we turn off the Typescript one. 
    "@typescript-eslint/no-empty-function": "off",
    "camelcase": 0,
    "no-debugger": 0,
    "prefer-const": 2,
    "space-before-function-paren": 2,
    "standard/no-callback-literal": 0,
    "sort-imports": ["error", {
      "ignoreCase": false,
      "ignoreDeclarationSort": false,
      "ignoreMemberSort": false,
      "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
    }]
  }
}
